chap 3.9.3 数据对齐
  很多计算机系统对基本数据类型的合法地址做了限制，要求某种类型的地址必须是某个值 K (通常是 2/4/8) 的倍数。这种对齐限制可以简化处理器和内存系统之间的硬件设计，可以通过一次内存来读取一个值。
  x86 在有对齐限制时可以提高内存系统的性能。
  编译器还可以通过 .align K 来指明全局数据所需的对齐。
  编译器可能会在结构体字段间或末尾加上空字节来保证对齐。
  
chap 3.10.1 理解指针
  1. c 语言中每个指针对应一种类型。如果对象类型为 T，那么指针的类型为 T*。void * 代表通用指针。指针类型不是机器代码的一部分，只是 c 语言用来帮助程序员避免寻址错误的。
  2. 每个指针都有一个值。为指针指向的地址， NULL 指针代表没有指向任何地方。
  3. 指针用 & 创建。这个运算符可以用于任何出现在等号左侧的类型，通常由 leaq 指令完成。
  4. * 用于间接引用指针。间接引用是通过内存引用来实现的，要么是储存到一个特定的地方，要么是从指定地方读取。
  5. 数组与指针紧密联系。
  6. 将指针转换为另一种类型不改变指向的地址存储的值。
  7. 指针也可以指向函数。函数指针的值是函数机器代码表示中第一条指令的值。
