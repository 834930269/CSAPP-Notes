chap 3.7.3 数据传送
  调用过程时除了控制传送之外也需要传递参数。x86 最多允许通过寄存器传递 6 个参数，多余的参数需要通过调用栈来传递。
  操作数的大小和位次会唯一决定传参需要的寄存器。
  通过栈来传递参数时，所有数据大小都向8的倍数对齐。
  
chap 3.7.4 栈上的局部存储
  有一些情况下，局部变量必须放在内存中，比如寄存器不够存放所有的局部变量，对某个变量使用了取地址操作，因此必须分配一个地址，某些数组或结构体变量。
  一般来说过程会通过减少栈指针在栈上分配空间存放局部变量。0.

chap 3.7.5 寄存器中的局部存储空间
  寄存器组是被所有过程共享的资源。因此必须保证不会被相互覆盖。x86 对此有一组统一的寄存器使用惯例，所有的过程都必须遵循。
  寄存器 %rbx, %rbp 和 r12 - r15 被划分为被调用者保存寄存器。P 调用 Q 时，Q 必须保证这些寄存器中的值不被改变。
  因此 Q 要么不去修改这些寄存器，要么在使用前先把这些寄存器中的值放到内存里，返回时重新赋值。这样 P 在调用完之后可以放心继续使用这些寄存器中的值。
  其他所有的寄存器，除了栈指针 %rsp 之外都是调用者保存寄存器。这样 Q 可以任意修改里面的值，因为恢复数据是 P 需要完成的工作。
  
chap 3.7.6 递归过程
  前面描述的寄存器和栈的使用惯例使得 x86 过程可以递归的调用自身。每个递归调用过程都在栈中有自己的私有空间，数据不会相互覆盖。
