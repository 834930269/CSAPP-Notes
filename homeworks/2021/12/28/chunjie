chap 3.8 数组分配和访问
  c 语言一个不同寻常的点是可以产生指向数组中元素的指针并进行计算。
  优化编译器非常善于简化数组索引使用的地址计算。

chap 3.8.1 基本原则
  T A[N]; 声明了一个 T 类型的，N 个元素的数组，并引入了标识符 A 作为指向数组开头 xa 的指针。元素 i 会被存放在 xa + L * i 的地址中。
  x86 的内存引用指令可以用来简化数组访问。例如 E 是一个 int 类型数组，访问 E[i] 时 xe 存放在 %rdx 中，i 存放在 %rcx 中，那么可以用 movl (%rdx, %rcx, 4), %eax 一条指令来完成读取 E[i] 到 %eax。

chap 3.8.2 指针运算
  c 语言允许对指针进行运算，计算的值会根据指针引用的数据类型的大小进行伸缩。如果 p 是指向类型 T 的指针，c 语言中 p + i 的值为 xp + L * i。
  & 和 * 可以产生指针和间接引用指针。A[i] 等价于 *(A + i)。
  
chap 3.8.3 嵌套的数组
  int A[5][3]; 等价于 typedef int row3_t[3]; row3_t A[5]。也可以看做是 5 行 3 列 的二维数组。数组元素在内存中按照行优先的顺序排列, 这种排列就是嵌套声明的结果。
  访问多维数组，编译器会以数组起始为基地址，可能经过伸缩的偏移量为索引计算出期望元素的偏移量，然后使用某种 MOV 指令。
  对于声明为 T D[R][C]; &D[i][j] = xd + L * (C * i + j)。
